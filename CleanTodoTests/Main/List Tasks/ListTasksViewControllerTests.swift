//
//  ListTasksViewControllerTests.swift
//  CleanTodo
//
//  Created by Zaim Ramlan on 06/03/2018.
//  Copyright (c) 2018 zaimramlan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CleanTodo
import XCTest

class ListTasksViewControllerTests: XCTestCase {
  
  // MARK: Subject Under Test (SUT)
  
  var sut: ListTasksViewController!
  var window: UIWindow!
  
  // MARK: Test Lifecycle
  
  override func setUp() {
    super.setUp()
    window = UIWindow()
    setupListTasksViewController()
  }
  
  override func tearDown() {
    window = nil
    super.tearDown()
  }
  
  // MARK: Test Setup
  
  func setupListTasksViewController() {
    let bundle = Bundle.main
    let storyboard = UIStoryboard(name: "Main", bundle: bundle)
    sut = storyboard.instantiateViewController(withIdentifier: "ListTasksViewController") as! ListTasksViewController
  }
  
  func loadView() {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test Doubles
  
  class ListTasksBusinessLogicSpy: ListTasksBusinessLogic {
    var fetchFromDataStoreCalled = false
    var SelectTaskCalled = false
    
    func fetchFromDataStore(with request: ListTasksModels.FetchFromDataStore.Request) {
      fetchFromDataStoreCalled = true
    }
    
    func selectTask(with request: ListTasksModels.SelectTask.Request) {
      SelectTaskCalled = true
    }
  }
  
  class TableViewSpy: UITableView {
    var reloadDataCalled = false
    
    override func reloadData() {
      reloadDataCalled = true
    }
  }
  
  // MARK: Tests
  
  func testShouldFetchFromDataStoreWhenViewIsLoaded() {
    
    // Given
    let spy        = ListTasksBusinessLogicSpy()
    sut.interactor = spy
    
    // When
    loadView()
    
    // Then
    XCTAssertTrue(spy.fetchFromDataStoreCalled, "viewDidLoad() should ask the interactor to fetch from DataStore")
  }
  
  func testDisplayFetchFromDataStoreResult() {
    
    // Given
    let viewModel = ListTasksModels.FetchFromDataStore.ViewModel(tasks: Seeds.tasks)
    let spy       = TableViewSpy()
    
    // When
    loadView()
    sut.listTaskTV = spy
    sut.displayFetchFromDataStoreResult(with: viewModel)
    
    // Then
    XCTAssertEqual(sut.tasks!, Seeds.tasks, "displayFetchFromDataStoreResult(with:) should update the list of tasks")
    XCTAssertEqual(sut.taskCountLabel!.text!, "\(Seeds.tasks.count)", "displayFetchFromDataStoreResult(with:) should update taskCountLabel's text")
    XCTAssertTrue(spy.reloadDataCalled, "displayFetchFromDataStoreResult(with:) should reload listTasksTV")
  }
  
  func testNumberOfRowsInAnySectionShouldEqualToNumberOfTasks() {
    
    // Given
    sut.tasks = Seeds.tasks
    
    // When
    loadView()
    let tableView    = sut.listTaskTV
    let numberOfRows = sut.tableView(tableView!, numberOfRowsInSection: 0)
    
    // Then
    XCTAssertEqual(numberOfRows, sut.tasks!.count, "The number of TableView rows should equal to the number of tasks in the list")
  }
  
  func testShouldAskInteractorToSelectTaskWhenTaskIsSelectedFromTableView() {
    
    // Given
    let spy        = ListTasksBusinessLogicSpy()
    sut.interactor = spy
    sut.tasks      = Seeds.tasks
    
    // When
    loadView()
    let tableView = sut.listTaskTV
    let indexPath = IndexPath(row: 0, section: 0)
    sut.tableView(tableView!, didSelectRowAt: indexPath)
    
    // Then
    XCTAssertTrue(spy.SelectTaskCalled, "tableView(_,didSelectRowAt:) should ask interactor to select the task at the given row")
  }
  
  func testShouldConfigureTableViewCellToDisplayTask() {
    
    // Given
    sut.tasks = Seeds.tasks
    
    // When
    loadView()
    let tableView = sut.listTaskTV
    let indexPath = IndexPath(row: 0, section: 0)
    let cell      = sut.tableView(tableView!, cellForRowAt: indexPath) as! ListTasksTableViewCell
    
    // Then
    XCTAssertEqual(cell.taskLabel!.text!, Seeds.tasks.first!, "A properly configured TableViewCell should display the task")
  }
}

