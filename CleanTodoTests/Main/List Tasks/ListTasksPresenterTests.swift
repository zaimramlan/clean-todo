//
//  ListTasksPresenterTests.swift
//  CleanTodo
//
//  Created by Zaim Ramlan on 06/03/2018.
//  Copyright (c) 2018 zaimramlan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CleanTodo
import XCTest

class ListTasksPresenterTests: XCTestCase {
    
    // MARK: Subject Under Test (SUT)
    
    var sut: ListTasksPresenter!
    
    // MARK: Test Lifecycle
    
    override func setUp() {
        super.setUp()
        setupListTasksPresenter()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test Setup
    
    func setupListTasksPresenter() {
        sut = ListTasksPresenter()
    }
    
    // MARK: Test Doubles
    
    class ListTasksDisplayLogicSpy: ListTasksDisplayLogic {
        
        // Expectations
        
        var displayFetchFromDataStoreResultCalled = false
        var displaySelectTaskResultCalled = false
        
        // Spied Methods
        
        func displayFetchFromDataStoreResult(with viewModel: ListTasksModels.FetchFromDataStore.ViewModel) {
            displayFetchFromDataStoreResultCalled = true
        }
        
        func displaySelectTaskResult(with viewModel: ListTasksModels.SelectTask.ViewModel) {
            displaySelectTaskResultCalled = true
        }
    }
    
    // MARK: Tests
    
    func testFetchFromDataStoreShouldFormatFetchFetchedDataForDisplay() {
        
        // Given
        
        let spy = ListTasksDisplayLogicSpy()
        sut.viewController = spy
        let response = ListTasksModels.FetchFromDataStore.Response(tasks: [])
        
        // When
        
        sut.presentFetchFromDataStoreResult(with: response)
        
        // Then
        
        XCTAssertTrue(spy.displayFetchFromDataStoreResultCalled, "presentFetchFromDataStoreResult(with:) should ask the view controller to display the result")
    }
    
    func testListTasks() {
        
        // Given
        
        let spy = ListTasksDisplayLogicSpy()
        sut.viewController = spy
        let response = ListTasksModels.SelectTask.Response(tasks: [])
        
        // When
        
        sut.presentSelectTaskResult(with: response)
        
        // Then
        
        XCTAssertTrue(spy.displaySelectTaskResultCalled, "presentListTasksResult(with:) should ask the view controller to display the result")
    }
}

