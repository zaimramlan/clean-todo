//
//  ListTasksInteractorTests.swift
//  CleanTodo
//
//  Created by Zaim Ramlan on 05/03/2018.
//  Copyright (c) 2018 zaimramlan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CleanTodo
import XCTest

class ListTasksInteractorTests: XCTestCase {
    
    // MARK: - Subject Under Test (SUT)
    
    var sut: ListTasksInteractor!
    
    // MARK: - Test Lifecycle
    
    override func setUp() {
        super.setUp()
        setupListTasksInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: - Test Setup
    
    func setupListTasksInteractor() {
        sut = ListTasksInteractor()
    }
    
    // MARK: - Test Doubles
    
    class ListTasksWorkerSpy: ListTasksWorker {
        
        // Expectations
        
        var removeTaskCalled = false
        
        // Spied Methods
        
        override func removeTask(_ task: String, from taskList: [String]) -> [String] {
            removeTaskCalled = true
            return []
        }
    }
    
    class ListTasksPresentationLogicSpy: ListTasksPresentationLogic {
        
        // Expectations
        
        var presentFetchFromDataStoreResultCalled = false
        var presentSelectTaskResultCalled = false
        
        // Spied Methods
        
        func presentFetchFromDataStoreResult(with response: ListTasksModels.FetchFromDataStore.Response) {
            presentFetchFromDataStoreResultCalled = true
        }
        
        func presentSelectTaskResult(with response: ListTasksModels.SelectTask.Response) {
            presentSelectTaskResultCalled = true
        }
    }
    
    // MARK: - Tests
    
    func testFetchFromDataStoreShouldAskPresenterToPresentFetchFromDataStoreResult() {
        
        // Given
        
        let request   = ListTasksModels.FetchFromDataStore.Request()
        let spy       = ListTasksPresentationLogicSpy()
        sut.presenter = spy
        
        // When
        
        sut.fetchFromDataStore(with: request)
        
        // Then
        
        XCTAssertTrue(spy.presentFetchFromDataStoreResultCalled, "fetchFromDataStore(with:) should ask the presenter to format the result")
    }
    
    func testSelectTaskShouldNotCallWorkerAndPresenterIfRequestTaskAndTasksListIsNil() {
        
        // Given
        
        let request      = ListTasksModels.SelectTask.Request()
        let workerSpy    = ListTasksWorkerSpy()
        let presenterSpy = ListTasksPresentationLogicSpy()
        sut.worker       = workerSpy
        sut.presenter    = presenterSpy
        sut.tasks        = nil
        
        // When
        
        sut.selectTask(with: request)
        
        // Then
        
        XCTAssertFalse(workerSpy.removeTaskCalled, "selectTask(with:) should not be call ListTasksWorker when Request Task & Tasks is nil")
        XCTAssertFalse(presenterSpy.presentSelectTaskResultCalled, "selectTask(with:) should not call ListTasksPresenter when Request Task & Tasks is nil")
    }
    
    func testSelectTaskShouldAskWorkerToRemoveSelectedTaskIfRequestTaskAndTasksListIsNotNil() {
        
        // Given
        
        let request   = ListTasksModels.SelectTask.Request(task: Seeds.tasks.last)
        let workerSpy = ListTasksWorkerSpy()
        sut.worker    = workerSpy
        sut.tasks     = Seeds.tasks
        
        // When
        
        sut.selectTask(with: request)
        
        // Then
        
        XCTAssertTrue(workerSpy.removeTaskCalled, "selectTask(with:) should call ListTasksWorker to remove selected task")
    }
    
    func testSelectTaskShouldAskPresenterToPresentRemainingTasksIfRequestTaskAndTasksListIsNotNil() {
        
        // Given
        
        let request      = ListTasksModels.SelectTask.Request(task: Seeds.tasks.first)
        let presenterSpy = ListTasksPresentationLogicSpy()
        sut.presenter    = presenterSpy
        sut.tasks        = Seeds.tasks
        
        // When
        
        sut.selectTask(with: request)
        
        // Then
        
        XCTAssertTrue(presenterSpy.presentSelectTaskResultCalled, "selectTask(with:) should call ListTasksPresenter to present remaining tasks")
    }
}


