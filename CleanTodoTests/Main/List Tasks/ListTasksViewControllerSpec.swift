//
//  ListTasksViewControllerSpec.swift
//  CleanTodo
//
//  Created by Zaim Ramlan on 06/03/2018.
//  Copyright (c) 2018 zaimramlan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Quick
import Nimble
@testable import CleanTodo

class ListTasksViewControllerSpec: QuickSpec {
    override func spec() {
        
        // MARK: - Subject Under Test (SUT)
        
        var sut: ListTasksViewController!
        var window: UIWindow!
        
        // MARK: - Test Doubles
        
        var interactorSpy: ListTasksBusinessLogicSpy!
        class ListTasksBusinessLogicSpy: ListTasksBusinessLogic {
            var fetchFromDataStoreCalled = false
            func fetchFromDataStore(with request: ListTasksModels.FetchFromDataStore.Request) {
                fetchFromDataStoreCalled = true
            }
            
            var selectTaskCalled = false
            func selectTask(with request: ListTasksModels.SelectTask.Request) {
                selectTaskCalled = true
            }
        }
        
        class TableViewSpy: UITableView {
            var reloadDataCalled = false
            
            override func reloadData() {
                reloadDataCalled = true
            }
        }
        
        // MARK: - Test Setup
        
        func setupViewController() {
            let bundle = Bundle.main
            let storyboard = UIStoryboard(name: "Main", bundle: bundle)
            sut = storyboard.instantiateViewController(withIdentifier: "ListTasksViewController") as? ListTasksViewController
        }
        
        func setupInteractorSpy() {
            interactorSpy = ListTasksBusinessLogicSpy()
            sut.interactor = interactorSpy
        }
        
        func loadView() {
            window.addSubview(sut.view)
            RunLoop.current.run(until: Date())
        }
        
        // MARK: - Tests
        
        beforeEach {
            window = UIWindow()
            setupViewController()
            setupInteractorSpy()
        }
        
        afterEach {
            window = nil
        }

        describe("view") {
            beforeEach { loadView() }
            
            context("did load", closure: {
                it("should setup table view", closure: {
                    expect(sut.listTaskTV.delegate).to(beAnInstanceOf(ListTasksViewController.self))
                    expect(sut.listTaskTV.dataSource).to(beAnInstanceOf(ListTasksViewController.self))
                })
                
                it("should fetch from data store", closure: {
                    expect(interactorSpy.fetchFromDataStoreCalled).to(beTrue())
                })
                
                it("should display fetch from data store", closure: {
                    let viewModel = ListTasksModels.FetchFromDataStore.ViewModel(tasks: Seeds.tasks)
                    let spy = TableViewSpy()
                    
                    sut.listTaskTV = spy
                    sut.displayFetchFromDataStoreResult(with: viewModel)
                    
                    expect(sut.tasks!).to(equal(Seeds.tasks))
                    expect(sut.taskCountLabel.text!).to(equal("\(Seeds.tasks.count)"))
                    expect(spy.reloadDataCalled).to(beTrue())
                })
            })
        }
        
        describe("table view") {
            context("did select row", closure: {
                it("should select task", closure: {
                    sut.tasks = Seeds.tasks
                    
                    loadView()
                    let tableView = sut.listTaskTV
                    let indexPath = IndexPath(row: 0, section: 0)
                    sut.tableView(tableView!, didSelectRowAt: indexPath)
                    
                    expect(interactorSpy.selectTaskCalled).to(beTrue())
                })
                
                it("should display select task") {
                    let viewModel = ListTasksModels.SelectTask.ViewModel(tasks: Seeds.tasks)
                    let spy = TableViewSpy()
                    
                    loadView()
                    sut.listTaskTV = spy
                    sut.displaySelectTaskResult(with: viewModel)
                    
                    expect(sut.tasks!).to(equal(Seeds.tasks))
                    expect(sut.taskCountLabel.text!).to(equal("\(Seeds.tasks.count)"))
                    expect(spy.reloadDataCalled).to(beTrue())
                }
            })
            
            context("number of rows in a section", closure: {
                context("with initialised tasks", closure: {
                    it("should be the same as the number of tasks", closure: {
                        sut.tasks = Seeds.tasks
                        
                        loadView()
                        let indexPath = IndexPath(row: 0, section: 0)
                        let rows = sut.tableView(sut.listTaskTV!, numberOfRowsInSection: indexPath.row)
                        
                        expect(rows).to(equal(Seeds.tasks.count))
                    })
                })
                
                context("without initialised tasks", closure: {
                    it("should be 0", closure: {
                        loadView()
                        let indexPath = IndexPath(row: 0, section: 0)
                        let rows = sut.tableView(sut.listTaskTV!, numberOfRowsInSection: indexPath.row)
                        
                        expect(rows).to(equal(0))
                    })
                })
            })
        }
        
        describe("table view cell") {
            context("with initialised tasks and row is within tasks' count", closure: {
                it("should be a ListTasksTableViewCell", closure: {
                    sut.tasks = Seeds.tasks

                    loadView()
                    let tableView = sut.listTaskTV
                    let indexPath = IndexPath(row: 0, section: 0)
                    let cell = sut.tableView(tableView!, cellForRowAt: indexPath) as! ListTasksTableViewCell
                    
                    expect(cell).notTo(beNil())
                    expect(cell.taskLabel.text!).to(equal(Seeds.tasks.first!))
                })
            })
            
            context("without initialised tasks and cell row is out of tasks' count", closure: {
                it("should not be a ListTasksTableViewCell", closure: {
                    loadView()
                    
                    let tableView = sut.listTaskTV
                    let indexPath = IndexPath(row: 0, section: 0)
                    let cell = sut.tableView(tableView!, cellForRowAt: indexPath) as? ListTasksTableViewCell

                    expect(cell).to(beNil())
                })
            })
        }
    }
}
