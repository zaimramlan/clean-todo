//
//  ListTasksPresenterSpec.swift
//  CleanTodo
//
//  Created by Zaim Ramlan on 06/03/2018.
//  Copyright (c) 2018 zaimramlan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Quick
import Nimble
@testable import CleanTodo

class ListTasksPresenterSpec: QuickSpec {
    override func spec() {
        
        // MARK: - Subject Under Test (SUT)
        
        var sut: ListTasksPresenter!
        
        // MARK: - Test Doubles
        
        var viewControllerSpy: ListTasksDisplayLogicSpy!
        class ListTasksDisplayLogicSpy: ListTasksDisplayLogic {
            var displayFetchFromDataStoreResultCalled = false
            func displayFetchFromDataStoreResult(with viewModel: ListTasksModels.FetchFromDataStore.ViewModel) {
                displayFetchFromDataStoreResultCalled = true
            }
            
            var displaySelectTaskResultCalled = false
            func displaySelectTaskResult(with viewModel: ListTasksModels.SelectTask.ViewModel) {
                displaySelectTaskResultCalled = true
            }
        }
        
        // MARK: - Test Setup Helpers
        
        func setupPresenter() {
            sut = ListTasksPresenter()
        }
        
        func setupViewControllerSpy() {
            viewControllerSpy = ListTasksDisplayLogicSpy()
            sut.viewController = viewControllerSpy
        }
        
        // MARK: - Tests
        
        beforeEach {
            setupPresenter()
            setupViewControllerSpy()
        }
        
        describe("present fetch from data store") {
            it("should ask view controller to display the result", closure: {
                let response = ListTasksModels.FetchFromDataStore.Response(tasks: Seeds.tasks)
                sut.presentFetchFromDataStoreResult(with: response)
                expect(viewControllerSpy.displayFetchFromDataStoreResultCalled).to(beTrue())
            })
        }
        
        describe("present select task") {
            it("should ask view controller to display the select task result", closure: {
                let response = ListTasksModels.SelectTask.Response(tasks: Seeds.tasks)
                sut.presentSelectTaskResult(with: response)
                expect(viewControllerSpy.displaySelectTaskResultCalled).to(beTrue())
            })
        }
    }
}
